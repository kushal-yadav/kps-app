{"version":3,"sources":["components/Row.jsx","components/Table.jsx","App.js","serviceWorker.js","index.js"],"names":["Row","props","data","organization_id","name","contact_name","email","country","Table","className","map","dt","i","key","App","organizationID","authToken","state","fetch","then","res","json","result","setState","organizations","catch","err","console","log","this","length","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+OAEe,SAASA,EAAIC,GACxB,IAAMC,EAAOD,EAAMC,KACnB,OACI,4BACI,4BAAKA,EAAKC,iBACV,4BAAKD,EAAKE,MACV,4BAAKF,EAAKG,cACV,4BAAKH,EAAKI,OACV,4BAAKJ,EAAKK,UCPP,SAASC,EAAMP,GAC1B,IAAMC,EAAOD,EAAMC,KACnB,OACI,2BAAOO,UAAU,sCACb,+BACI,4BACI,+CACA,iDACA,4CACA,qCACA,yCAGR,+BACKP,EAAKQ,KAAI,SAACC,EAAIC,GAAL,OAAW,kBAACZ,EAAD,CAAKa,IAAKD,EAAGV,KAAMS,S,ICbnCG,E,YAInB,aAAe,IAAD,8BACZ,+CAJFC,eAAiB,UAGH,EAFdC,UAAY,mCAIV,EAAKC,MAAQ,CACXf,KAAM,IAHI,E,iFAOO,IAAD,OAClBgB,MAAM,kCAAkCC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UACrDF,MAAK,SAAAG,GAAM,OAAI,EAAKC,SAAS,CAAErB,KAAMoB,EAAOE,mBAC5CC,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,Q,+BAI5B,OACE,yBAAKjB,UAAU,OACZoB,KAAKZ,MAAMf,KAAK4B,OAAS,GACxB,kBAACtB,EAAD,CAAON,KAAM2B,KAAKZ,MAAMf,Y,GArBD6B,aCQbC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxB,MAAK,SAAAyB,GACjCA,EAAaC,iB","file":"static/js/main.4f4ca388.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default function Row(props) {\r\n    const data = props.data;\r\n    return (\r\n        <tr>\r\n            <td>{data.organization_id}</td>\r\n            <td>{data.name}</td>\r\n            <td>{data.contact_name}</td>\r\n            <td>{data.email}</td>\r\n            <td>{data.country}</td>\r\n        </tr>\r\n    );\r\n}","import React from 'react';\r\nimport Row from './Row'\r\n\r\nexport default function Table(props) {\r\n    const data = props.data;\r\n    return (\r\n        <table className=\"table table-striped table-bordered\">\r\n            <thead>\r\n                <tr>\r\n                    <th>Organization ID</th>\r\n                    <th>Organization Name</th>\r\n                    <th>Contact Name</th>\r\n                    <th>Email</th>\r\n                    <th>Country</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {data.map((dt, i) => <Row key={i} data={dt} />)}\r\n            </tbody>\r\n        </table>\r\n    );\r\n}","import React, { Component } from 'react';\nimport './App.css';\nimport Table from './components/Table'\n\nexport default class App extends Component {\n  organizationID = 649249007;\n  authToken = 'db36e02a50b57e081efe533a8a0f834b';\n\n  constructor() {\n    super();\n    this.state = {\n      data: []\n    }\n  }\n\n  componentDidMount() {\n    fetch('http://localhost:3001/contacts').then(res => res.json())\n      .then(result => this.setState({ data: result.organizations }))\n      .catch(err => console.log(err));\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        {this.state.data.length > 0 &&\n          <Table data={this.state.data} />\n        }\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport \"bootstrap/dist/css/bootstrap.css\";\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}